# -*- coding: utf-8 -*-
"""brain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPGjT-ThQ9MzNhSd29yARnM-EEsdi_EC
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from transformers import AutoFeatureExtractor, SwinForImageClassification
from sklearn.metrics import accuracy_score
import numpy as np
from google.colab import drive

drive.mount('/content/drive')

# Define image transformations
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Correct path setup
DATA_DIR = '/content/drive/MyDrive/Brain'  # Ensure this path matches your Google Drive setup

# Load dataset (use corrected paths)
train_data = datasets.ImageFolder(root=DATA_DIR + '/Training', transform=transform)
test_data = datasets.ImageFolder(root=DATA_DIR + '/Testing', transform=transform)

# Ensure this path matches your Google Drive setup
MODEL_NAME = "microsoft/swin-tiny-patch4-window7-224"

train_loader = DataLoader(train_data, batch_size=16, shuffle=True) # small no of epochs replicate
test_loader = DataLoader(test_data, batch_size=16, shuffle=False)

# Load Swin Transformer model with ignore_mismatched_sizes=True
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = SwinForImageClassification.from_pretrained(
    MODEL_NAME,
    num_labels=len(train_data.classes),
    ignore_mismatched_sizes=True
).to(device)

# Update the classifier layer to match the number of classes
model.classifier = nn.Linear(model.classifier.in_features, len(train_data.classes)).to(device)

# Define loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)

# Training loop
num_epochs = 50
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images).logits
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}")

# Evaluation
model.eval()
all_preds, all_labels = [], []
with torch.no_grad():
    for images, labels in test_loader:
        images, labels = images.to(device), labels.to(device)
        outputs = model(images).logits
        _, preds = torch.max(outputs, 1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

accuracy = accuracy_score(all_labels, all_preds)
print(f"Test Accuracy: {accuracy:.4f}")